#include "cubeai/io/file_writer_base.h"

#include <boost/algorithm/string.hpp>
#include <chrono>
#include <ctime>
#include <stdexcept>

namespace cubeai{
namespace io{

FileWriterBase::FileWriterBase(const std::string& file_name, FileFormats::Type t) // const std::ios_base::openmode mode)
:
FileHandlerBase<std::ofstream>(file_name, t),
comment_mark_(FileWriterBase::default_comment_mark())
{}

FileWriterBase::~FileWriterBase(){
    close();
}


void
FileWriterBase::open(){

    std::string suffix = FileFormats::type_to_string(t_);

    /// attempt to split the file name and check if a suffix has been given
    /// if yes check if this is the same with the file type
    std::vector<std::string> cont;
    boost::split(cont, file_name_, boost::is_any_of("."));

    auto& f =  this-> get_file_stream();
    if(cont.size() == 2){

        if( cont[1] != suffix){
            throw std::logic_error("File already has a suffix but this does not match with what was given "+cont[1]+" != "+suffix);
        }
        else{

            f.open(file_name_, std::ios_base::out); // mode);
        }
    }
    else if(cont.size() > 2){
        throw std::logic_error("More than one suffixes found in the file name");
    }
    else{

        std::string filename = file_name_+"."+suffix;
        f.open(filename, std::ios_base::out); //mode);
    }
}

void FileWriterBase::write_header(){

    //if the file is not open
    if(!is_open()){
        throw std::logic_error("File "+file_name_+" is not open");
    }

    std::chrono::time_point<std::chrono::system_clock> now;
    now = std::chrono::system_clock::now();
    std::time_t now_time = std::chrono::system_clock::to_time_t(now);
    auto& f = this->get_file_stream();
    f<<comment_mark_;
    f<<"File Generated by kernel at: "<<std::ctime(&now_time);
    f.flush();
}

}
}
